[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "fyp-energy-forecasting"
version = "0.1.0"
description = "AZR-inspired Energy Forecasting & Anomaly Detection for UK households with feeder validation"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "fyp", from = "src"}]
license = "MIT"
repository = "https://github.com/vatsalmehta/FYP-Predictive_Anomaly_Detection"
keywords = ["energy", "forecasting", "anomaly-detection", "time-series", "self-play", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.11"
# Data manipulation and analysis
polars = "^0.20.0"
pyarrow = "^14.0.0"
numpy = "^1.24.0"
pandas = "^2.1.0"

# Machine learning and statistics
scikit-learn = "^1.3.0"
statsmodels = "^0.14.0"
torch = "^2.1.0"

# Experiment tracking and data versioning
mlflow = "^2.8.0"
dvc = {extras = ["s3", "azure"], version = "^3.30.0"}

# Visualization
matplotlib = "^3.7.0"
seaborn = "^0.12.0"
plotly = "^5.17.0"

# Configuration and utilities
pydantic = "^2.5.0"
click = "^8.1.0"
python-dotenv = "^1.0.0"
tqdm = "^4.66.0"

# Time series specific
tslearn = "^0.6.0"
sktime = "^0.24.0"

[tool.poetry.group.dev.dependencies]
# Code quality
ruff = "^0.1.0"
black = "^23.10.0"
mypy = "^1.7.0"
pre-commit = "^3.5.0"

# Testing
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.4.0"

# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

# Jupyter
jupyter = "^1.0.0"
ipykernel = "^6.26.0"
nbstripout = "^0.6.0"

# [tool.poetry.scripts]
# fyp = "fyp.cli:main"  # Disabled until src/fyp/cli.py exists

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "C901", # too-complex
    "SIM101", # duplicate-isinstance-call
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.mccabe]
max-complexity = 18

[tool.ruff.isort]
known-first-party = ["fyp"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "polars",
    "pyarrow",
    "mlflow",
    "dvc",
    "tslearn",
    "sktime",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
